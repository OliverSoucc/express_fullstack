
//if we run the code in development, then run the code in scope
if (process.env.NODE_ENV !== "production") {
    //thanks to this we can access environment variables from .env
    require('dotenv').config();
}
// console.log(process.env.SECRET);

const express = require('express');
const app = express();
const path = require('path');
const mongoose = require('mongoose');
const ejsMate = require('ejs-mate');
const session = require('express-session');
const flash = require('connect-flash');
const ExpressError = require('./utils/ExpressError');
const methodOverride = require('method-override');
const passport = require('passport');
const LocalStrategy = require('passport-local');
const User = require('./models/user');

//Connection string to DB
//this is a URL generated by Mogno Atlas when deploying
const dbUrl = process.env.DB_URL;
//I am also keeping the one with localhost if something went wrong
const dbUrlLocal = 'mongodb://localhost:27017/yelp-camp'
/////////////////////////////////////////

//until now, we were storing session in memory story, which is not very good, this will create automatically new collection in our DB with sessions
//this is storing our session in deployed DB on Mongo Atlas (if you set key url in parameter to value dbUrl, few lines below)
//note: I have implemented older version of the package, so I can code along the Colt tutorial
const MongoDBStore = require('connect-mongo')(session);

//for security -> if someone type a query in search bar, in URL..., it can cause a huge problems to our DB
//this type of protection is called Injection (in our case Mongo Injection)
const mongoSanitize = require('express-mongo-sanitize');

//for security -> protecting parts of request headers
//at this moment I commented out the app.use(helmet()); because the version an approach changed a little bit and I had problems with CORS, so check docs if you want to use it
const helmet = require('helmet');

//for security -> XSS (cross site scripting), when user put <script>...</script> in input or ULR..., and run some Malware with it
//I did not implement it here in project but if you want look at the Colt tutorial 568-569
//but basically you have to prevent user from putting HTML in any of your inputs or Url


const campgroundRoutes = require('./routes/campgrounds');
const reviewRoutes = require('./routes/reviews')
const userRoutes = require('./routes/users');

app.engine('ejs', ejsMate);
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'ejs');

app.use(express.urlencoded({extended: true}));
app.use(methodOverride('_method'));
app.use(express.static(path.join(__dirname,'public')));
app.use(mongoSanitize());
app.use(flash());
// app.use(helmet());

//Session
const store = new MongoDBStore({
    url: dbUrlLocal,
    secret: 'thiswillbebettersecretlater',
    touchAfter: 24 * 60 * 60
});

store.on("error", function (e) {
    console.log("Session store error", e);
})

const sessionConfig = {
    store,
    //name -> for security -> someone can know those default names of cookies from different npm packages, so good practise is to provide your of custom one
    name:'session',
    secret: 'thiswillbebettersecretlater',
    resave: false,
    saveUninitialized: true,
    cookie:{
        //httpOnly -> for security -> our cookie is not accessible with JS, only with HTML
        httpOnly: true,
        expires: Date.now() + 1000 * 60 * 60 * 24 * 7,
        maxAge: 1000 * 60 * 60 * 24 * 7
    }
}
app.use(session(sessionConfig));
//////////////////////////////////////////////


//this comes from passport npm, look into docs for more details
app.use(passport.initialize());
app.use(passport.session());
passport.use(new LocalStrategy(User.authenticate()));
passport.serializeUser(User.serializeUser());
passport.deserializeUser(User.deserializeUser());
////////////////////////////////////////////////////////////

//in this middleware we are creating global variables, that you can access in each template
app.use((req, res, next) =>{
    //here we are storing current user info(username and email) if user is signed in, if not then this is undefined
    //currentUser variable is used just for the purpose of navbar template to show or hide anchor tags -> Login, Register, Logout
    //this is how you access currentUser in templates
    res.locals.currentUser = req.user;
    res.locals.success = req.flash('success');
    res.locals.error = req.flash('error');
    next();
})

//MONGO
main().catch(err => console.log('Mongo CANNOT START', err));

async function main() {
    await mongoose.connect(dbUrlLocal).then(() => {
        console.log('MONGO Connected')
    });
}
////////////////////////

//Generating routes
app.use('/campgrounds', campgroundRoutes);
app.use('/campgrounds/:id/reviews', reviewRoutes);
app.use('/', userRoutes);
///////////////////////////

app.get('/fakeUser', async (req, res) =>{
    const user = new User({email: 'colt@oliver.com', username: 'Oliver'});
    const newUser = await User.register(user, 'chicken');
    res.send(newUser);
})

app.get('/', (req, res) => {
    res.render('home')
});


app.all('*', (req, res, next) => {
    next(new ExpressError('Page not Found'), 404);
})

app.use((err, req, res, next) => {
    const {statusCode = 500} = err;
    if (!err.message) err.message = 'Oh no, Something went wrong';
    res.status(statusCode).render('error', {err});
})

app.listen(3000, () => {
    console.log("ON PORT 3000");
});